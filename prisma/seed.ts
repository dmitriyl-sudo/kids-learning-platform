import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcrypt';
import { USER_ROLES } from '@kids-learning/config';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
  const parentPasswordHash = await bcrypt.hash('password123', 12);
  
  const parent = await prisma.user.upsert({
    where: { email: 'parent@example.com' },
    update: {},
    create: {
      email: 'parent@example.com',
      passwordHash: parentPasswordHash,
      name: '–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞',
      role: USER_ROLES.PARENT,
    },
  });

  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ä–æ–¥–∏—Ç–µ–ª—è
  await prisma.parentProfile.upsert({
    where: { userId: parent.id },
    update: {},
    create: {
      userId: parent.id,
      settingsJSON: JSON.stringify({
        notifications: true,
        theme: 'light',
      }),
    },
  });

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
  const childPasswordHash = await bcrypt.hash('childpass123', 10);
  
  const child = await prisma.user.upsert({
    where: { email: 'child@example.com' },
    update: {},
    create: {
      email: 'child@example.com',
      passwordHash: childPasswordHash,
      name: '–ú–∞–∫—Å–∏–º –ò–≤–∞–Ω–æ–≤',
      role: USER_ROLES.CHILD,
      parentId: parent.id,
    },
  });

  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ–±–µ–Ω–∫–∞
  await prisma.childProfile.upsert({
    where: { userId: child.id },
    update: {},
    create: {
      userId: child.id,
      nativeLang: 'ru',
      targetLang: 'en',
      settingsJSON: JSON.stringify({
        maxStudyTimeMinutes: 30,
        breakIntervalMinutes: 15,
        soundEnabled: true,
      }),
    },
  });

  // –°–æ–∑–¥–∞–µ–º –∫–æ—à–µ–ª–µ–∫ —Ä–µ–±–µ–Ω–∫–∞
  await prisma.wallet.upsert({
    where: { userId: child.id },
    update: {},
    create: {
      userId: child.id,
      balance: 100, // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    },
  });

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
  const sampleCards = [
    {
      topic: 'animals',
      nativeText: '–∫–æ—Ç',
      targetText: 'cat',
      nativeLang: 'ru',
      targetLang: 'en',
      difficulty: 1,
    },
    {
      topic: 'animals',
      nativeText: '—Å–æ–±–∞–∫–∞',
      targetText: 'dog',
      nativeLang: 'ru',
      targetLang: 'en',
      difficulty: 1,
    },
    {
      topic: 'colors',
      nativeText: '–∫—Ä–∞—Å–Ω—ã–π',
      targetText: 'red',
      nativeLang: 'ru',
      targetLang: 'en',
      difficulty: 1,
    },
    {
      topic: 'colors',
      nativeText: '—Å–∏–Ω–∏–π',
      targetText: 'blue',
      nativeLang: 'ru',
      targetLang: 'en',
      difficulty: 1,
    },
    {
      topic: 'numbers',
      nativeText: '–æ–¥–∏–Ω',
      targetText: 'one',
      nativeLang: 'ru',
      targetLang: 'en',
      difficulty: 1,
    },
  ];

  for (const cardData of sampleCards) {
    await prisma.learningCard.upsert({
      where: {
        // –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–∞–≤–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
        id: `${cardData.topic}-${cardData.nativeText}-${cardData.targetText}`,
      },
      update: {},
      create: {
        ...cardData,
        id: `${cardData.topic}-${cardData.nativeText}-${cardData.targetText}`,
      },
    });
  }

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è
  await prisma.studySession.create({
    data: {
      userId: child.id,
      startedAt: new Date(Date.now() - 1800000), // 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
      endedAt: new Date(),
      durationMs: 1800000, // 30 –º–∏–Ω—É—Ç
      cardsCount: 3,
      earnedCoins: 15,
    },
  });

  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!');
  console.log('');
  console.log('üë§ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
  console.log('üìß –†–æ–¥–∏—Ç–µ–ª—å: parent@example.com / password123');
  console.log('üë∂ –†–µ–±–µ–Ω–æ–∫: child@example.com / childpass123');
  console.log('');
  console.log('üéØ –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:', sampleCards.length);
  console.log('üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ä–µ–±–µ–Ω–∫–∞: 100 –º–æ–Ω–µ—Ç');
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', e);
    await prisma.$disconnect();
    process.exit(1);
  });
